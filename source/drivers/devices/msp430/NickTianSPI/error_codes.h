//******************************************************************************
// Error Codes for WinCube Project 2008
//
// Description: This file contains the error codes that will be used for the
//              WinCube project.
//
//              Each error code is 2 bytes long, and encoded from the most
//              significant bit as follows:
//              - 8 bits to determine the module (thus allowing groupings
//                  of common error codes).
//              - 8 bits to denote error messages.
//
//              Error codes may be stored even if not logged as they could be
//              used for debugging purposes.
//
//              Error codes are NOT checked by the operating system to determine
//              the status of various systems. Messages relayed back to the OS
//              should be managed separately. These codes are meant to be passed
//				back from drivers to applications and/or to be generated by
//				the one application to be handled by another app.
//
//              Error codes may be externally stored in other files linked from
//              this master error_codes.h file. In that case, please indicate
//              the range that you will be using for your modules.
//
// NOTE:        The range of 0x00XX to 0x02XX is reserved for system wide errors
//              that would cause the whole satellite to go offline or die.
//
// Dario Schor
// WinCube Team - C&DH
// University of Manitoba
// January 1, 2008
//******************************************************************************


#ifndef __error_codes_h__
#define __error_codes_h__

	//***********************************//
	// SYSTEM WIDE ERRORS                //
	// 0x00XX to 0x02XX                  //
	//***********************************//

	// Used in case a function returning a value completes successfully.
	#define NO_ERROR				0x0000

	// Force system to restart
	#define FORCE_RESTART			0x0000

	//***********************************//
	// STARTUP ROUTINE                   //
	// 0x03XX                            //
	//***********************************//
	//#include "startup_errors.h"

	//***********************************//
	// REAL TIME CLOCK DRIVER            //
	// 0x04XX to 0x04XX                  //
	//***********************************//
	#define RTC_BUSY				0x0401
	#define RTC_TIME_OUT_OF_RANGE	0x0402
	#define RTC_DATE_OUT_OF_RANGE	0x0403
	#define RTC_INVALID_ADDRESS		0x0404
	#define RTC_INVALID_DATA		0x0405
	#define RTC_INVALID_ALARM		0x0406
	#define RTC_DEAD				0x0407

	//***********************************//
	// FLASH MEMORY DRIVER	             //
	// 0x05XX                  			 //
	//***********************************//
	#define FLASH_OUT_OF_RANGE		0x0501
	#define FLASH_BUSY				0x0502

	//***********************************//
	// BUS ERRORS						 //
	// Found in SPI/I2C based drivers	 //
	// 0x07xx to 0x0Bxx					 //
	//***********************************//

	// Module identifiers
	#define MODULE_I2C				0x0700
	#define MODULE_SPI				0x0800
	#define MODULE_SMBUS			0x0900
	#define MODULE_SD				0x0A00
	#define MODULE_EEPROM			0x0B00

	// Error codes
	#define ERR_CRC					0x0001		// CRC check failed
	#define ERR_TIMEOUT				0x0002		// Timed out of operation
	#define ERR_BUS_BUSY			0x0004		// Bus was busy
	#define ERR_FLOW				0x0008		// Underflow/Overrun
	#define ERR_ADDR				0x0010		// Attempted to leave buffer or bad address
	#define ERR_NACK				0x0020		// No ACK (I2C specific)
	#define ERR_ARB_LOST			0x0040		// Arbitration lost (I2C specific)
	#define ERR_ECC					0x0020		// ECC error (SD specific)
	#define ERR_OTHER				0x0080		// Some other error

	//***********************************//
	// SOFTWARE ECC ERRORS			 	 //
	// Found in ECC driver	 		 	 //
	// 0x06xx to 0x06xx				 	 //
	//***********************************//
		#define MODULE_ECC        	0x0600		//Unable to decode data block (too many errors to correct)
        #define ECC_DECODE_ERR      0x0001

	//***********************************//
	// LOGGER ERRORS
	// Found in logger driver
	// 0x0Cxx to 0x0Cxx
	//***********************************//
        #define MODULE_LOGGER       0x0C00
        //#define LOG_OTHER         0x0080
        #define LOG_INVALID_COMMAND 0x0001

	//***********************************//
	// STATUS REGISTER(SR) ERRORS		 //
	// Found in logger driver			 //
	// 0x0Dxx to 0x0Dxx					 //
	//***********************************//
        #define MODULE_SR           0x0D00
        #define SR_OTHER            0x0080
        #define SR_NO_VALID_SR      0x0001
        #define SR_FIRST_FAIL       0x0002
        #define SR_SECOND_FAIL      0x0004
        #define SR_THIRD_FAIL       0x0008

    //***********************************//
	// WDT ERRORS						 //
	// Found in WDT driver				 //
	// 0x0Exx to 0x0Exx					 //
	//***********************************//
		#define MODULE_WDT			0x0E00
		#define WDT_RESET			0x0001	// internal WDT was triggered
      
    //***********************************//
	// POWER management APP ERRORs		 //
	// 0x0Exx to 0x0Exx					 //
	//***********************************//
        #define MODULE_PM           0x0F00
        #define PM_OTHER            0x0001
        #define PM_SP_DATA          0x0002
          
      

#endif
